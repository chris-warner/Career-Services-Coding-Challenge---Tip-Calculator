{"version":3,"sources":["assets/images/tip.jpeg","components/NavbarComponent.js","components/TipCalculatorForm.js","components/JumbotronComponent.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","NavbarStyle","marginLeft","marginRight","NavbarComponent","props","react_default","a","createElement","Navbar","style","bg","expand","Brand","href","title","TipCalculatorForm","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","BillTotal","TipPercentage","People","TipTotal","handleBillTotalChange","bind","assertThisInitialized","handleTipPercentChange","handlePeopleChange","handleSubmit","event","setState","target","value","preventDefault","people","persons","parseInt","tip","parseFloat","getPercantage","PercentFor","PercentOf","Math","floor","tipTotal","alert","tipPercent","total","calulateSinglePersonTip","TipCalculatorFormDivStyle","Form","onSubmit","Group","as","Row","controlId","formDivStyle","Label","column","sm","Col","Control","type","placeholder","onChange","min","required","Button","React","Component","marginTop","width","jumbostronStyle","height","backgroundImage","background","backgroundSize","backgroundPosition","color","JumbotronComponent","Jumbotron","descriptionP","AppDivStyle","maxWidth","display","margin","App","className","components_NavbarComponent","components_JumbotronComponent","components_TipCalculatorForm","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6594f9cf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/tip.8cf47f00.jpeg\";","import React from 'react';\nimport {Navbar,Nav,NavDropdown,Button,Form,FormControl} from 'react-bootstrap';\n\nfunction NavbarComponent(props) {\n    return (\n        <div>\n            <Navbar style={NavbarStyle} bg=\"light\" expand=\"lg\">\n                <Navbar.Brand href=\"#home\">{props.title}</Navbar.Brand>\n            </Navbar>\n        </div>\n    );\n}\n\nconst NavbarStyle = {\n    marginLeft:'20px',\n    marginRight:'20px'\n}\n\nexport default NavbarComponent","import React from 'react';\nimport { Button, Form, FormControl, Row, Col } from 'react-bootstrap';\n\nclass TipCalculatorForm extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            BillTotal: 0,\n            TipPercentage: 0,\n            People: 0,\n            TipTotal: 0\n        };\n        this.handleBillTotalChange = this.handleBillTotalChange.bind(this);\n        this.handleTipPercentChange = this.handleTipPercentChange.bind(this);\n        this.handlePeopleChange = this.handlePeopleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleBillTotalChange(event) {\n        this.setState({\n            BillTotal: event.target.value,\n        });\n    }\n\n    handleTipPercentChange(event) {\n        this.setState({\n            TipPercentage: event.target.value,\n        });\n    }\n\n    handlePeopleChange(event) {\n        this.setState({\n            People: event.target.value\n        });\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n        let persons = parseInt(this.state.People);\n        let tip = parseInt(this.state.TipPercentage);\n        let BillTotal = parseFloat(this.state.BillTotal);\n\n        function getPercantage(PercentFor, PercentOf) {\n            return Math.floor(PercentFor / PercentOf * 100);\n        }\n\n        if (persons > 1) {\n            function calulateMultiplePersonTip(people, tipPercent, total) {\n                return (getPercantage(tipPercent, total)) / people;\n            }\n            let tipTotal = calulateMultiplePersonTip(persons, tip, BillTotal);\n\n            alert('The tip total comes out to $ ' + tipTotal + ' per person');\n\n        } else\n            if (persons === 1) {\n                function calulateSinglePersonTip(tipPercent, total) {\n                    return (getPercantage(tipPercent, total));\n                }\n                let tipTotal = calulateSinglePersonTip(tip, BillTotal);\n                alert('Your tip total comes out to $ ' + tipTotal);\n            }\n    }\n\n    render() {\n        return (\n            <div style={TipCalculatorFormDivStyle}>\n                <Form onSubmit={this.handleSubmit}>\n                    <Form.Group as={Row} controlId=\"formHorizontal\">\n\n                        <div style={formDivStyle}>\n                        <Form.Label column sm={4}>\n                            Bill Total: $ {this.state.BillTotal}\n                        </Form.Label>\n                        <Col sm={12}>\n                            <Form.Control type=\"number\" placeholder=\"Bill Total\" value={this.state.BillTotal.value} onChange={this.handleBillTotalChange} min=\"1\" required />\n                        </Col>\n                        </div>\n\n                        <div style={formDivStyle}>\n                        <Form.Label column sm={4}>\n                            Tip:  {this.state.TipPercentage} %\n                    </Form.Label>\n                        <Col sm={12}>\n                            <Form.Control type=\"number\" placeholder=\"Tip Percentage\" value={this.state.TipPercentage.value} onChange={this.handleTipPercentChange} min=\"1\" required />\n                        </Col>\n\n                        </div>\n                        <div style={formDivStyle}>\n                        <Form.Label column sm={4}>\n                            People: {this.state.People}\n                        </Form.Label>\n                        <Col sm={12}>\n                            <Form.Control type=\"number\" placeholder=\"Number of people\"  value={this.state.People.value} onChange={this.handlePeopleChange} min=\"1\" required />\n                        </Col>\n                        </div>\n                    </Form.Group>\n                    <Button type=\"submit\" value=\"Submit\" > Calculate</Button>\n                </Form>\n            </div>\n        );\n    }\n}\n\nconst formDivStyle = {\nmarginTop:'8px',\nwidth:'100%'\n}\n\nconst TipCalculatorFormDivStyle = {\n    marginLeft: '20px',\n    marginRight: '20px',\n    marginTop: '10px',\n}\n\nexport default TipCalculatorForm;","import React from 'react';\nimport {Jumbotron} from 'react-bootstrap';\nimport background from '../assets/images/tip.jpeg';\n\nfunction JumbotronComponent() {\n    return(\n        <Jumbotron style={jumbostronStyle}>\n        </Jumbotron>\n    );\n}\n\nconst jumbostronStyle = {\n    height: '200px',\n    backgroundImage: 'url(' + background + ')',\n    backgroundSize: 'cover',\n    backgroundPosition: 'center center',\n    color: 'white',\n    marginLeft:'20px',\n    marginRight:'20px',\n    marginTop:'16px'\n}   \n\nexport default JumbotronComponent;","import React from 'react';\nimport NavbarComponent from './components/NavbarComponent';\nimport TipCalculatorForm from './components/TipCalculatorForm';\nimport JumbotronComponent from './components/JumbotronComponent';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div style={AppDivStyle} className=\"App\">\n    <NavbarComponent title={'Tip Calculator'} />\n    <JumbotronComponent />\n    <p style={descriptionP}>Tip Calculator is a simple application that will help calculate a tip at a restaurant for your server.</p>\n    <TipCalculatorForm  />\n    </div>\n  );\n}\n\nconst descriptionP = {\n  marginLeft:'18px',\n  marginRight:'18px'\n}\n\nconst AppDivStyle = {\n  maxWidth:'900px',\n  display: 'block',\n  margin:'auto'\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}