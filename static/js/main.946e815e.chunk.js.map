{"version":3,"sources":["assets/images/tip.jpeg","components/TipCalculatorForm.js","components/JumbotronComponent.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","TipCalculatorForm","props","_this","Object","classCallCheck","this","_super","call","state","BillTotal","TipPercentage","People","TipTotal","handleBillTotalChange","bind","assertThisInitialized","handleTipPercentChange","handlePeopleChange","handleSubmit","event","setState","target","value","preventDefault","persons","parseInt","tip","parseFloat","n","total","toFixed","alert","react_default","a","createElement","style","TipCalculatorFormDivStyle","Form","onSubmit","Group","as","Row","controlId","formDivStyle","Label","column","sm","Col","Control","type","placeholder","onChange","min","required","Button","React","Component","marginTop","width","marginLeft","marginRight","jumbostronStyle","height","backgroundImage","background","backgroundSize","backgroundPosition","color","JumbotronComponent","Jumbotron","descriptionP","AppDivStyle","maxWidth","display","margin","App","className","components_JumbotronComponent","components_TipCalculatorForm","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,2QCGlCC,oDACF,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAI,EAAAC,KAAAF,KAAMJ,IACDO,MAAQ,CACTC,UAAW,EACXC,cAAe,EACfC,OAAQ,EACRC,SAAU,GAEdV,EAAKW,sBAAwBX,EAAKW,sBAAsBC,KAA3BX,OAAAY,EAAA,EAAAZ,CAAAD,IAC7BA,EAAKc,uBAAyBd,EAAKc,uBAAuBF,KAA5BX,OAAAY,EAAA,EAAAZ,CAAAD,IAC9BA,EAAKe,mBAAqBf,EAAKe,mBAAmBH,KAAxBX,OAAAY,EAAA,EAAAZ,CAAAD,IAC1BA,EAAKgB,aAAehB,EAAKgB,aAAaJ,KAAlBX,OAAAY,EAAA,EAAAZ,CAAAD,IAXLA,oEAcGiB,GAClBd,KAAKe,SAAS,CACVX,UAAWU,EAAME,OAAOC,uDAITH,GACnBd,KAAKe,SAAS,CACVV,cAAeS,EAAME,OAAOC,mDAIjBH,GACfd,KAAKe,SAAS,CACVT,OAAQQ,EAAME,OAAOC,6CAIhBH,GACTA,EAAMI,iBACN,IAAIC,EAAUC,SAASpB,KAAKG,MAAMG,QAC9Be,EAAMC,WAAWtB,KAAKG,MAAME,eAC5BD,EAAYkB,WAAWtB,KAAKG,MAAMC,WAWtC,IATgCmB,EAAG7B,EAS/B8B,GAT4BD,EASGnB,EATAV,EASW2B,EAR1B,IAAZF,EACII,EAAI,IAAO7B,EAEhByB,EAAU,EACAI,EAAI,IAAO7B,EAAGyB,OAD3B,GAMJK,EAAQA,EAAMC,QAAQ,GAElBN,EAAU,EACdO,MAAM,gCAAkCF,EAAQ,eAGlC,IAAXL,GACHO,MAAM,iCAAmCF,oCAMzC,OACIG,EAAAC,EAAAC,cAAA,OAAKC,MAAOC,GACRJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAMC,SAAUjC,KAAKa,cACjBc,EAAAC,EAAAC,cAACG,EAAA,EAAKE,MAAN,CAAYC,GAAIC,IAAKC,UAAU,kBAE3BV,EAAAC,EAAAC,cAAA,OAAKC,MAAOQ,GACRX,EAAAC,EAAAC,cAACG,EAAA,EAAKO,MAAN,CAAYC,QAAM,EAACC,GAAI,GAAvB,iBACmBzC,KAAKG,MAAMC,WAE9BuB,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAKD,GAAI,IACLd,EAAAC,EAAAC,cAACG,EAAA,EAAKW,QAAN,CAAcC,KAAK,QAAQC,YAAY,aAAa5B,MAAOjB,KAAKG,MAAMC,UAAUa,MAAO6B,SAAU9C,KAAKQ,sBAAuBuC,IAAI,IAAIC,UAAQ,MAIrJrB,EAAAC,EAAAC,cAAA,OAAKC,MAAOQ,GACRX,EAAAC,EAAAC,cAACG,EAAA,EAAKO,MAAN,CAAYC,QAAM,EAACC,GAAI,GAAvB,SACWzC,KAAKG,MAAME,cADtB,MAGAsB,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAKD,GAAI,IACLd,EAAAC,EAAAC,cAACG,EAAA,EAAKW,QAAN,CAAcC,KAAK,QAAQC,YAAY,iBAAiB5B,MAAOjB,KAAKG,MAAME,cAAcY,MAAO6B,SAAU9C,KAAKW,uBAAwBqC,UAAQ,MAItJrB,EAAAC,EAAAC,cAAA,OAAKC,MAAOQ,GACRX,EAAAC,EAAAC,cAACG,EAAA,EAAKO,MAAN,CAAYC,QAAM,EAACC,GAAI,GAAvB,WACazC,KAAKG,MAAMG,QAExBqB,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAKD,GAAI,IACLd,EAAAC,EAAAC,cAACG,EAAA,EAAKW,QAAN,CAAcC,KAAK,SAASC,YAAY,mBAAmB5B,MAAOjB,KAAKG,MAAMG,OAAOW,MAAO6B,SAAU9C,KAAKY,mBAAoBmC,IAAI,IAAIC,UAAQ,OAI1JrB,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CAAQL,KAAK,SAAS3B,MAAM,UAA5B,uBA9FYiC,IAAMC,WAqGhCb,EAAe,CACjBc,UAAW,MACXC,MAAO,QAGLtB,EAA4B,CAC9BuB,WAAY,OACZC,YAAa,OACbH,UAAW,QAGAzD,oBCxGf,IAAM6D,EAAkB,CACpBC,OAAQ,QACRC,gBAAiB,cAASC,EAAa,IACvCC,eAAgB,QAChBC,mBAAoB,gBACpBC,MAAO,QACPR,WAAW,OACXC,YAAY,OACZH,UAAU,QAGCW,EAlBf,WACI,OACIpC,EAAAC,EAAAC,cAACmC,EAAA,EAAD,CAAWlC,MAAO0B,WCS1B,IAAMS,EAAe,CACnBX,WAAW,OACXC,YAAY,QAGRW,EAAc,CAClBC,SAAS,QACTC,QAAS,QACTC,OAAO,OACPjB,UAAU,OAKGkB,EAxBf,WACE,OACE3C,EAAAC,EAAAC,cAAA,OAAKC,MAAOoC,EAAaK,UAAU,OACnC5C,EAAAC,EAAAC,cAAC2C,EAAD,MACA7C,EAAAC,EAAAC,cAAA,KAAGC,MAAOmC,GAAV,0GACAtC,EAAAC,EAAAC,cAAC4C,EAAD,QCEgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrD,EAAAC,EAAAC,cAACoD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.946e815e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/tip.8cf47f00.jpeg\";","import React from 'react';\nimport { Button, Form, FormControl, Row, Col } from 'react-bootstrap';\n\nclass TipCalculatorForm extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            BillTotal: 0.00,\n            TipPercentage: .0,\n            People: 0,\n            TipTotal: 0\n        };\n        this.handleBillTotalChange = this.handleBillTotalChange.bind(this);\n        this.handleTipPercentChange = this.handleTipPercentChange.bind(this);\n        this.handlePeopleChange = this.handlePeopleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleBillTotalChange(event) {\n        this.setState({\n            BillTotal: event.target.value,\n        });\n    }\n\n    handleTipPercentChange(event) {\n        this.setState({\n            TipPercentage: event.target.value,\n        });\n    }\n\n    handlePeopleChange(event) {\n        this.setState({\n            People: event.target.value\n        });\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n        let persons = parseInt(this.state.People);\n        let tip = parseFloat(this.state.TipPercentage);\n        let BillTotal = parseFloat(this.state.BillTotal);\n        \n        function CalculateThePercentage(n, p) {\n            if (persons === 1){\n            return (n / 100) * p;\n            } else\n            if(persons > 1) {\n                return ((n / 100) * p)/persons;\n            }\n        }\n\n        let total = CalculateThePercentage(BillTotal, tip)\n        total = total.toFixed(2);\n\n        if (persons > 1){\n        alert('The tip total comes out to $ ' + total + ' per person');\n        }\n        else \n        if(persons ===1 ){\n        alert('Your tip total comes out to $ ' + total);\n        }\n    }\n\n\n    render() {\n        return (\n            <div style={TipCalculatorFormDivStyle}>\n                <Form onSubmit={this.handleSubmit}>\n                    <Form.Group as={Row} controlId=\"formHorizontal\">\n\n                        <div style={formDivStyle}>\n                            <Form.Label column sm={4}>\n                                Bill Total: $ {this.state.BillTotal}\n                            </Form.Label>\n                            <Col sm={12}>\n                                <Form.Control type=\"float\" placeholder=\"Bill Total\" value={this.state.BillTotal.value} onChange={this.handleBillTotalChange} min=\"1\" required />\n                            </Col>\n                        </div>\n\n                        <div style={formDivStyle}>\n                            <Form.Label column sm={4}>\n                                Tip:  {this.state.TipPercentage} %\n                    </Form.Label>\n                            <Col sm={12}>\n                                <Form.Control type=\"float\" placeholder=\"Tip Percentage\" value={this.state.TipPercentage.value} onChange={this.handleTipPercentChange} required />\n                            </Col>\n\n                        </div>\n                        <div style={formDivStyle}>\n                            <Form.Label column sm={4}>\n                                People: {this.state.People}\n                            </Form.Label>\n                            <Col sm={12}>\n                                <Form.Control type=\"number\" placeholder=\"Number of people\" value={this.state.People.value} onChange={this.handlePeopleChange} min=\"1\" required />\n                            </Col>\n                        </div>\n                    </Form.Group>\n                    <Button type=\"submit\" value=\"Submit\" > Calculate</Button>\n                </Form>\n            </div>\n        );\n    }\n}\n\nconst formDivStyle = {\n    marginTop: '8px',\n    width: '100%'\n}\n\nconst TipCalculatorFormDivStyle = {\n    marginLeft: '20px',\n    marginRight: '20px',\n    marginTop: '10px',\n}\n\nexport default TipCalculatorForm;","import React from 'react';\nimport {Jumbotron} from 'react-bootstrap';\nimport background from '../assets/images/tip.jpeg';\n\nfunction JumbotronComponent() {\n    return(\n        <Jumbotron style={jumbostronStyle}>\n        </Jumbotron>\n    );\n}\n\nconst jumbostronStyle = {\n    height: '200px',\n    backgroundImage: 'url(' + background + ')',\n    backgroundSize: 'cover',\n    backgroundPosition: 'center center',\n    color: 'white',\n    marginLeft:'20px',\n    marginRight:'20px',\n    marginTop:'32px'\n}   \n\nexport default JumbotronComponent;","import React from 'react';\nimport TipCalculatorForm from './components/TipCalculatorForm';\nimport JumbotronComponent from './components/JumbotronComponent';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div style={AppDivStyle} className=\"App\">\n    <JumbotronComponent />\n    <p style={descriptionP}>Tip Calculator is a simple application that will help calculate a tip at a restaurant for your server.</p>\n    <TipCalculatorForm  />\n    </div>\n  );\n}\n\nconst descriptionP = {\n  marginLeft:'18px',\n  marginRight:'18px'\n}\n\nconst AppDivStyle = {\n  maxWidth:'900px',\n  display: 'block',\n  margin:'auto',\n  marginTop:'8px'\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}